#!/bin/bash

# Show git branch, commits behind and commits ahead of remote tracking branch
git_branch() {
    current_branch=$(git symbolic-ref HEAD --short 2>/dev/null)
    [ -z "$current_branch" ] && exit
    upstream_branch=$(git for-each-ref --format='%(upstream:short)' "$(git symbolic-ref -q HEAD)")
    commits_diff_count=$(git rev-list --left-right --count "$upstream_branch"..."$current_branch")
    commits_behind=${commits_diff_count:0:1}
    commits_ahead=${commits_diff_count: -1}

    # after "\n" add any char and then delete it, so the new line is not trimmed by cmd expansion
    printf "[$current_branch  $commits_behind  $commits_ahead]\nx\b"
}

# reverse i search fzf implementation
bind '"\C-r": "\C-x1\e^\er"'
bind -x '"\C-x1": fzf_history';

fzf_history() {
    ehc $(history | fzf --tac --tiebreak=index | perl -ne 'm/^\s*([0-9]+)/ and print "!$1"')
}

ehc() {
    if [[ -n $1 ]]
    then
	bind '"\er": redraw-current-line'
	bind '"\e^": magic-space'
	READLINE_LINE=${READLINE_LINE:+${READLINE_LINE:0:READLINE_POINT}}${1}${READLINE_LINE:+${READLINE_LINE:READLINE_POINT}}
	READLINE_POINT=$(( READLINE_POINT + ${#1} ))
    else
	bind '"\er":'
	bind '"\e^":'
    fi
}

# edit config
ec() {
    file=$(find $XDG_CONFIG_HOME -type f | grep -Evi "$(cat ~/.config/cfg-ignore-list.txt)" | fzf)
    [ -z "$file" ] && return
    vim $file
}

# edit script
es() {
    file=$(find $SCRIPTS -type f | fzf)
    [ -z "$file" ] && return
    vim $file
}
