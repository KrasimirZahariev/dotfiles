#!/usr/bin/env bash

# checkout branch
git_checkout_branch() {
  git checkout "$(git branch -r | sed "s/\s\+origin\///" | fzf)"
  git status
}

# Quick commit with message without quotes
git_quick_commit() {
  message=$*
  if [[ $message ]]; then
    git commit -m "${message}"
  else
    printf "\\033[31mERROR:\\033[0m Commit message required\\n"
    return 1
  fi
}

dotfiles_git_quick_commit() {
  message=$*
  if [[ $message ]]; then
    git --git-dir="$DOTFILES_DIR" --work-tree="$HOME" commit -m "${message}"
  else
    printf "\\033[31mERROR:\\033[0m Commit message required\\n"
    return 1
  fi
}

# edit config
ec() {
  file=$(rg --files --hidden --no-ignore "$XDG_CONFIG_HOME" | fzf)
  [ -z "$file" ] && return
  $EDITOR "$file"
}

# edit script
es() {
  file=$(rg --files "$SCRIPTS_DIR" | fzf)
  [ -z "$file" ] && return
  $EDITOR "$file"
}

# edit vimrc
ev() {
  $EDITOR "$XDG_CONFIG_HOME/nvim/init.lua"
}

# edit notes
en() {
  $EDITOR "$DOCUMENTS_DIR/notes.txt"
}

# edit trainings
et() {
  $EDITOR "$DOCUMENTS_DIR/trainings.txt"
}

# edit finance
ef() {
  scim "$DOCUMENTS_DIR/finance2023.sc"
}

# check weather
weather() {
  curl wttr.in/"$(readlink /etc/localtime | cut -d "/" -f6)"
}

# check command
cheat() {
  curl cheat.sh/"$1"
}

# termbin
termbin() {
  nc termbin.com 9999 | tee /dev/tty | xclip -selection clipboard
}

# fzf process kill
fkill() {
  command ps aux | sed 1d | fzf -m | awk '{print $2}' | xargs -r -t sudo kill -"${1:-9}"
}

# kill all processes that use port $1
portkill() {
  lsof -i :$1 | tail -n +2 | awk '{print $2}' | xargs -r kill
}

# Make a directory and immediately cd to it
mkcd() {
  mkdir -p -v "$@" && cd "$@" || return
}

# Check the spelling of a word (no output = correct)
spell() {
  echo "$@" | aspell pipe | grep -v 'but really Aspell' | awk -F ':' '{print $2}'
}

# Format xml from system clipboard and copy it
xmlformat() {
  xclip -o -selection clipboard | xmllint --format - | xclip -i -selection clipboard
}

# Colored tail wrapper
colored_tail() {
  command tail "$@" | ccze -A -o nolookups
}

# Colored ps wrapper
colored_ps() {
  command ps "$@" | ccze -A -o nolookups | less
}

qrcode () {
  input="$*"
  [ -z "$input" ] && input=$(cat)

  file="$(mktemp)"
  qrencode -m2 -s10 -o "$file" "$input" \
    && kitten icat --align=left "$file" 2> /dev/null \
    && rm "$file" 1> /dev/null
}

tsdate() {
  date -d @$((($1 + 500) / 1000))
}

pick_current_book() {
  _book_dir="$DOCUMENTS_DIR/books"
  _new_book="$(find "$_book_dir" -type f | fzf)"

  [ -f "$_new_book" ] && ln -sf "$_new_book" "$_book_dir/current-book"
}
