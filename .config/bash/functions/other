#!/bin/bash

# fzf history
bind '"\C-r": "\C-x1\e^\er"'
bind -x '"\C-x1": __fzf_history';
__fzf_history() {
  __ehc "$(history | fzf --tac --tiebreak=index | perl -ne 'm/^\s*([0-9]+)/ and print "!$1"')"
}
__ehc() {
  if [[ -n $1 ]]
  then
    bind '"\er": redraw-current-line'
    bind '"\e^": magic-space'
    READLINE_LINE=${READLINE_LINE:+${READLINE_LINE:0:READLINE_POINT}}${1}${READLINE_LINE:+${READLINE_LINE:READLINE_POINT}}
    READLINE_POINT=$(( READLINE_POINT + ${#1} ))
  else
    bind '"\er":'
    bind '"\e^":'
  fi
}

# Compact current working directory
__prompt_string_compact_pwd(){
  w='\w'; IFS=/ read -ra a <<< "${w@P}"
  ((c=${#a[@]}-1))
  for e in "${a[@]::$c}"; do
    [[ $e =~ ^\. ]]&&l=2||l=1
    printf '%s/' "${e:0:$l}"
  done;
  echo "${a[$c]}"
}

# Show git branch
__prompt_string_git_branch() {
  current_branch=$(git symbolic-ref HEAD --short 2>/dev/null)
  [ -z "$current_branch" ] && return || echo "$current_branch î‚  "
}

# Configure prompt showing vi mode
_set_vi_mode_prompt_strings () {
  NORMAL_MODE_PROMPT="\[\e[33m\][\[\e[m\]\[\e[32m\]\$(__prompt_string_compact_pwd)\[\e[m\]\[\e[33m\]]\[\e[m\] \[\e[33m\]\$(__prompt_string_git_branch)\[\e[m\]\[\e[32m\]N\[\e[m\] \[\e[32m\]:\[\e[m\]\[\e[32m\]:\[\e[m\]\[\e[32m\]:\[\e[m\]"
  INSERT_MODE_PROMPT="\[\e[33m\][\[\e[m\]\[\e[32m\]\$(__prompt_string_compact_pwd)\[\e[m\]\[\e[33m\]]\[\e[m\] \[\e[33m\]\$(__prompt_string_git_branch)\[\e[m\]\[\e[34m\]I\[\e[m\] \[\e[34m\]>\[\e[m\]\[\e[34m\]>\[\e[m\]\[\e[34m\]>\[\e[m\]"
  bind "set vi-cmd-mode-string \"${NORMAL_MODE_PROMPT@P}\""
  bind "set vi-ins-mode-string \"${INSERT_MODE_PROMPT@P}\""
}

########################################################################################
#                                   PUBLIC FUNCTIONS                                   #
########################################################################################

# checkout branch
git_checkout_branch() {
  git checkout "$(git branch -r | sed "s/ origin\///" | fzf)"
  git status
}

# Quick commit with message without quotes
git_quick_commit() {
  message=$*
  if [[ $message ]]; then
    git commit -m "${message}"
  else
    printf "\\033[31mERROR:\\033[0m Commit message required\\n"
    return 1
  fi
}

dotfiles_git_quick_commit() {
  message=$*
  if [[ $message ]]; then
    git --git-dir="$DOTFILES_DIR" --work-tree="$HOME" commit -m "${message}"
  else
    printf "\\033[31mERROR:\\033[0m Commit message required\\n"
    return 1
  fi
}

# edit config
ec() {
  file=$(rg --files --hidden --no-ignore "$XDG_CONFIG_HOME" | fzf)
  [ -z "$file" ] && return
  $EDITOR "$file"
}

# edit script
es() {
  file=$(rg --files "$SCRIPTS_DIR" | fzf)
  [ -z "$file" ] && return
  $EDITOR "$file"
}

# edit vimrc
ev() {
  $EDITOR "$XDG_CONFIG_HOME/nvim/init.vim"
}

#edit notes
en() {
  $EDITOR "$DOCUMENTS_DIR/notes.txt"
}

#edit todo
et() {
  $EDITOR "$DOCUMENTS_DIR/todo.txt"
}

# run command in the background
bkgr() {
  (nohup "$@" &>/dev/null &)
}

# check weather
weather() {
  curl wttr.in/"$(readlink /etc/localtime | cut -d "/" -f6)"
}

# check command
cheat() {
  curl cheat.sh/"$1"
}

# termbin
termbin() {
  nc termbin.com 9999 | tee /dev/tty | xclip -selection clipboard
}

# fzf process kill
fkill() {
  command ps aux | sed 1d | fzf -m | awk '{print $2}' | xargs -r -t sudo kill -"${1:-9}"
}

# pip install and add package to list
pipinstall() {
  [ -z "$@" ] && return
  pip install "$@" && pip freeze --user > "$XDG_CONFIG_HOME/packages/pkglist-python.txt"
}

# pip uninstall and add package to list
pipremove() {
  [ -z "$@" ] && return
  pip uninstall "$@" && pip freeze --user > "$XDG_CONFIG_HOME/packages/pkglist-python.txt"
}

# Make a directory and immediately cd to it
mkcd() {
  mkdir -p -v "$@" && cd "$@" || return
}

# Check the spelling of a word (no output = correct)
spell() {
  echo "$@" | aspell pipe | grep -v 'but really Aspell' | awk -F ':' '{print $2}'
}

# Start vpn
vpnstart() {
  bkgr sudo openvpn --config "$XDG_CONFIG_HOME/vpn/config.ovpn" && notify-send "VPN Started"
}

# Format xml from system clipboard and copy it
xmlformat() {
  xclip -o | xmllint --format - | xclip -i -selection clipboard
}

# Colored tail wrapper
colored_tail() {
  command tail "$@" | ccze -A -o nolookups
}

# Colored ps wrapper
colored_ps() {
  command ps "$@" | ccze -A -o nolookups | less
}

# Colored man pagaes wrapper
colored_man() {
  env \
  LESS_TERMCAP_mb=$LIGHT_GREEN \
  LESS_TERMCAP_md=$LIGHT_GREEN \
  LESS_TERMCAP_me=$NO_COLOR \
  LESS_TERMCAP_se=$NO_COLOR \
  LESS_TERMCAP_so=$LIGHT_YELLOW_UNDERLINE \
  LESS_TERMCAP_ue=$NO_COLOR \
  LESS_TERMCAP_us=$CYAN \
  man "$@"
}
