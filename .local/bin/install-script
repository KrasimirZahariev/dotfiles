#!/bin/sh
# vim:filetype=sh
# shellcheck disable=SC2164

_GIT_BASE_URL="https://github.com/KrasimirZahariev/"
_GIT_SSH_URL="git@github.com:KrasimirZahariev/"
_DOTFILES_REPO="dotfiles.git"
_PARU_REPO="https://aur.archlinux.org/paru-bin.git"
_MY_REPOS="
  st
  dmenu
"
_PKGLIST="https://raw.githubusercontent.com/KrasimirZahariev/dotfiles/refs/heads/master/.config/packages/pkglist.txt"
_PKGLIST_AUR="https://raw.githubusercontent.com/KrasimirZahariev/dotfiles/refs/heads/master/.config/packages/pkglist-aur.txt"
_BACKUP_DIR="$HOME"/existing.bak

main() {
  _ensure_prerequisites
  # UNCOMMENT
  _order_mirrors
  _organize_bash_files
  _clone_dotfiles
  _git_ignore_dotfiles
  _checkout_dotfiles
  _symlink_etc_files
  _git_assume_unchanged_files
  _source_profile
  _install_official_packages
  _install_aur_packages
  _install_custom_packages
  _set_up_terminal
  _start_services
  _assign_user_groups
  _enable_informant
}

_ensure_prerequisites() {
  cd "$HOME" || exit 1

  if ! sudo -l >/dev/null 2>&1; then
    __log_error "Sudo privileges needed"
    exit 1
  fi

  mkdir               \
    "$HOME"/downloads \
    "$HOME"/documents \
    "$HOME"/pictures  \
    "$HOME"/.cache    \
    "$HOME"/music     \
    "$HOME"/videos    \
    "$HOME"/work      \
    "$HOME"/vcs

  __ensure_installed reflector
  __ensure_installed git
}

_order_mirrors() {
  __log_info "Order mirrors"
  sudo reflector                     \
    --verbose                        \
    --sort rate                      \
    --fastest 20                     \
    --age 48                         \
    --protocol https                 \
    --country bg,ro,rs,gr,tr,de,fr   \
    --connection-timeout 2           \
    --download-timeout 2             \
    --save /etc/pacman.d/mirrorlist
}

_organize_bash_files() {
  __log_info "Organize bash files"
  rm "$HOME"/.bashrc "$HOME"/.bash_profile "$HOME"/.bash_logout
  mkdir -p "$HOME"/.local/share/bash
  mv "$HOME"/.bash_history "$HOME"/.local/share/bash/bash_history
}

_clone_dotfiles() {
  __log_info "Clone dotfiles"
  git clone --bare "${_GIT_BASE_URL}${_DOTFILES_REPO}" "$HOME"/.dotfiles
}

# ignore "dotfiles" to avoid recursion
_git_ignore_dotfiles() {
  __log_info "Git ignore dotfiles"
  if grep -q ".dotfiles" "$HOME"/.gitignore 2>/dev/null; then
    echo ".dotfiles" >> "$HOME"/.gitignore
  fi;
}

_checkout_dotfiles() {
  __log_info "Checkout dotfiles"
  _checkout_output="$(__dotfiles checkout 2>&1)"
  if [ $? = 1 ]; then
    __log_info "  Moving files in existing.bak"
    __backup_existing_files "$_checkout_output" && __dotfiles checkout
  fi;

  __hide_untracked_files

  __dotfiles remote set-url origin "${_GIT_SSH_URL}${_DOTFILES_REPO}"

  __log_info "  Dotfiles checked out successfully";
}

_symlink_etc_files() {
  __log_info "Symlink /etc files"
  sudo cp -rfs "$HOME"/.config/etc/* /etc
  # unlink because when installed will prevent further installation of packages
  sudo ln -s /dev/null /etc/pacman.d/hooks/00-informant.hook
}

_git_assume_unchanged_files() {
  __log_info "Git assume unchanged files"
  __dotfiles update-index --assume-unchanged "$HOME"/.ssh/config
}

_source_profile() {
  __log_info "Source profile"
  _profile="$HOME"/.profile
  # shellcheck disable=SC1090
  [ -f "$_profile" ] || . "$_profile"
}

_install_official_packages() {
  __log_info "Install official packages"
  curl -s "$_PKGLIST" | sudo pacman -Syu --needed --noconfirm -
}

_install_aur_packages() {
  __log_info "Install AUR packages"

  cd "$HOME"/vcs               \
    && git clone "$_PARU_REPO" \
    && cd paru-bin             \
    && makepkg -si --noconfirm \
    && cd

  curl -s "$_PKGLIST_AUR" | paru -Syu --needed --noconfirm -
}

_install_custom_packages() {
  __log_info "Install custom packages"
  cd "$HOME"/vcs

  for _repo in $_MY_REPOS; do
    _repo_url="${_GIT_BASE_URL}${_repo}.git"
    git clone "$_repo_url"                       \
      && cd "$_repo"                             \
      && make                                    \
      && sudo make clean install                 \
      && git remote set-url origin "$_repo_url"  \
      && cd ..
  done
  cd
}

_set_up_terminal() {
  __log_info "Set up terminal"
  wal --theme base16-gruvbox-pale
}

_start_services() {
  __log_info "Start services"
  sudo systemctl daemon-reload
  sudo systemctl enable cronie
  sudo systemctl enable tlp.service
  sudo systemctl enable keyd
}

_assign_user_groups() {
  __log_info "Assign user groups"
  _user="$(id -un)"
  sudo usermod -aG wireshark,keyd,adbusers,docker,video,input,audio,wheel,informant "$_user"
}

_enable_informant() {
  __log_info "Enable informant"
  sudo informant read --all \
    && sudo unlink /etc/pacman.d/hooks/00-informant.hook
}

# git bare repo command wrapper
__dotfiles() {
  /usr/bin/git --git-dir="$HOME"/.dotfiles --work-tree="$HOME" "$@"
}

__hide_untracked_files() {
  __dotfiles config --local status.showUntrackedFiles no
}

__backup_existing_files() {
  _checkout_output="$1"

  mkdir "$_BACKUP_DIR"

  # get files only
  _existing_files="$(echo "$_checkout_output" \
    | grep -E "^\s+"                          \
    | awk '{print $1}')"

  # move each file while keeping the dir structure
  for _file in $_existing_files; do
    _subdir="$(echo "$_file" | awk -F'/' 'sub(FS $NF,x)')"

    [ -n "$_subdir" ] && mkdir -p "${_BACKUP_DIR}/${_subdir}"

    mv "$_file" "${_BACKUP_DIR}/${_file}" \
      && echo "    ${_file} -> ${_BACKUP_DIR}/${_file}"
  done
}

__ensure_installed() {
  command -v "$1" >/dev/null 2>&1 && return 0

  __log_info "$1 is not installed. Installing it now..."
  sudo pacman -Syu --noconfirm "$1"
}

__log_info() {
  printf "\033[1;32m%s\033[0m\n" "$(date +%H:%M:%S):::::$1"
}

__log_error() {
  printf "\033[1;31m%s\033[0m\n" "$(date +%H:%M:%S):::::$1" >&2
}

####################################################################################################
main "$@" 2>&1 | tee -a install-script.log
exit
