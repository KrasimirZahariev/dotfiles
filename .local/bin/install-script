#!/bin/dash
# vim:filetype=sh

### TODO
# install aur pkg -> paru
# fonts -> pacman/paru
# don't compile st?
###

_GIT_BASE_URL="https://github.com/KrasimirZahariev/"
_GIT_SSH_URL="git@github.com:KrasimirZahariev/"
_DOTFILES_REPO="dotfiles.git"
_MY_REPOS="
  st.git
  dmenu.git
  pinentry-dmenu.git
"
_BACKUP_DIR="$HOME"/existing.bak
_AUR_BASE_URL="https://aur.archlinux.org/"

_FIRA_CODE_BASE_URL="https://github.com/tonsky/FiraCode/raw/master/distr/ttf/FiraCode-"
_FIRA_CODE_FONT_TYPES="
  Bold
  Light
  Medium
  Regular
  Retina
  SemiBold
"
_FIRA_CODE_NERD_FONT_URL="https://github.com/ryanoasis/nerd-fonts/raw/master/patched-fonts/\
  FiraCode/Regular/complete/Fira%20Code%20Regular%20Nerd%20Font%20Complete.ttf"


main() {
  cd "$HOME" || exit

  _organize_bash_files
  _clone_dotfiles
  _git_ignore_dotfiles
  _checkout_dotfiles
  _symlink_etc_files
  _git_assume_unchanged_files
  _install_fonts
  _install_custom_packages
  _install_aur_packages
  _install_python_packages
  _set_up_terminal
  _start_services
}

_organize_bash_files() {
  rm "$HOME"/.bashrc "$HOME"/.bash_profile "$HOME"/.bash_logout
  mkdir -p "$HOME"/.local/share/bash
  mv "$HOME"/.bash_history "$HOME"/.local/share/bash/bash_history
}

_clone_dotfiles() {
  git clone --bare "${_GIT_BASE_URL}${_DOTFILES_REPO}" "$HOME"/.dotfiles
}

# git bare repo command wrapper
_dotfiles() {
  /usr/bin/git --git-dir="$HOME"/.dotfiles --work-tree="$HOME" "$@"
}

# ignore "dotfiles" to avoid recursion
_git_ignore_dotfiles() {
  if grep -q ".dotfiles" "$HOME"/.gitignore 2>/dev/null; then
    echo ".dotfiles" >> "$HOME"/.gitignore
  fi;
}

_backup_existing_files() {
  _log_indent="  "

  _checkout_output="$1"

  mkdir "$_BACKUP_DIR"

  # get files only
  _existing_files="$(echo "$_checkout_output" \
    | grep -E "^\s+"                          \
    | awk '{print $1}')"

  # move each file while keeping the dir structure
  for _file in $_existing_files; do
    _subdir="$(echo "$_file" | awk -F'/' 'sub(FS $NF,x)')"

    [ -n "$_subdir" ] && mkdir -p "${_BACKUP_DIR}/${_subdir}"

    mv "$_file" "${_BACKUP_DIR}/${_file}" \
      && echo "${_log_indent}${_file} -> ${_BACKUP_DIR}/${_file}"
  done
}

_hide_untracked_files() {
  _dotfiles config --local status.showUntrackedFiles no
}

_checkout_dotfiles() {
  _checkout_output="$(_dotfiles checkout 2>&1)"
  if [ $? = 1 ]; then
    echo "Moving files in existing.bak"
    _backup_existing_files "$_checkout_output" && _dotfiles checkout
  fi;

  _hide_untracked_files

  dotfiles remote set-url origin "${_GIT_SSH_URL}${_DOTFILES_REPO}"

  echo "Dotfiles checked out successfully";
}

_symlink_etc_files() {
  sudo cp -rfs "$HOME"/.config/etc/* /etc
}

_git_assume_unchanged_files() {
  dotfiles update-index --assume-unchanged "$HOME"/.ssh/config
}

_install_fonts() {
  mkdir -p "$HOME"/.local/share/fonts
  cd "$HOME"/.local/share/fonts || return

  # download FiraCode fonts
  for _font_type in $_FIRA_CODE_FONT_TYPES; do
    wget "${_FIRA_CODE_BASE_URL}${_font_type}.ttf"
  done

  # download FiraCode NerdFont
  wget "$_FIRA_CODE_NERD_FONT_URL"
}

_install_custom_packages() {
  mkdir "$HOME"/vcs
  cd "$HOME"/vcs || return

  for _repo in $_MY_REPOS; do
    git clone "${_GIT_BASE_URL}${_repo}"

    cd "$_repo"                                              \
      && make                                                \
      && sudo make clean install                             \
      && git remote set-url origin "${_GIT_SSH_URL}${_repo}" \
      && cd ..
  done
}

_install_aur_packages() {
  mkdir "$HOME"/aur
  cd "$HOME"/aur || return

  while read -r _pkg; do
    git clone "${_AUR_BASE_URL}${_pkg}.git"

    cd "$_pkg"                     \
      && makepkg -s -i --noconfirm \
      && cd ..
  done < "$HOME"/vcs/dotfiles/.config/packages/pkglist-aur.txt
}

_install_python_packages() {
  pip install -r "$HOME"/vcs/dotfiles/.config/packages/pkglist-python.txt
}

_set_up_terminal() {
  wal --theme base16-gruvbox-pale
}

_start_services() {
  sudo systemctl daemon-reload

  sudo systemctl enable tlp.service
  sudo systemctl start tlp.service

  sudo systemctl enable keyd
  sudo systemctl start keyd

  sudo systemctl enable pkgfile-update.timer
}

####################################################################################################
main "$@"; exit
